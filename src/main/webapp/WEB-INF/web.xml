<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!-- Web容器加载顺序ServletContext->context-param->listener->filter->servlet -->


    <display-name>bookstore</display-name>

    <!-- ===================================================================
  -  Context parameters
  -  =================================================================== -->
    <!-- 禁止自动初始化log4j2 -->
    <context-param>
        <param-name>isLog4jAutoInitializationDisabled</param-name>
        <param-value>false</param-value>
    </context-param>

    <!-- 配置 spring 的核心监听器 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:spring/applicationContext-*.xml</param-value>
    </context-param>


    <!-- ===================================================================
  -  Servlet listeners
  -  =================================================================== -->
    <!--
    -   防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面
    -   详细描述见http://blog.csdn.net/jadyer/article/details/11991457
    -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!--
    -   实例化Spring容器
    -   应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml
    -   http://starscream.iteye.com/blog/1107036
    -   http://www.davenkin.me/post/2012-10-18/40039948363
    -   WebApplicationContextUtils.getWebApplicationContext()
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- ===================================================================
  -  Filters
  -  =================================================================== -->
    <!--
    -   解决乱码问题
    -   forceEncoding默认为false,此时效果可大致理解为request.setCharacterEncoding("UTF-8")
    -   forceEncoding=true后,可大致理解为request.setCharacterEncoding("UTF-8")和response.setCharacterEncoding("UTF-8")
    -->
    <filter>
        <filter-name>SpringEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--web.xml 3.0的新特性，是否支持异步-->
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>SpringEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- ===================================================================
  -  Servlets
  -  =================================================================== -->
    <!-- SpringMVC核心控制器 -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- contextConfigLocation:配置springmvc加载的配置文件(配置处理器映射器、适配器等等)
             如果不配置contextConfigLocation,默认加载的是/WEB-INF/servlet名称-servlet.xml(springmvc-servlet.xml)
         -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:spring/spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
        <!--web.xml 3.0的新特性，是否支持异步-->
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!-- 第一种:*.action,访问以.action结尾的url由DispatcherServlet进行解析
             第二种:/,所有访问的地址都由DispatcherServlet进行解析,对于静态文件的解析需要不让DispatcherServlet进行解析
             使用此种方式可以实现RESTful风格的url
             第三种:/*,此种配置方式不对,使用这种配置,最终要转发到一个jsp页面时,仍然会由DispatcherServlet解析jsp地址,不能根据jsp页面找到handler,会报错
         -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!-- ===================================================================
  -  Welcome file list
  -  =================================================================== -->
    <!--springmvc 中已经配置-->
    <!-- 欢迎页 -->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>