<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zking.bookstore.mapper.BookMapper" >
  <resultMap id="BaseResultMap" type="com.zking.bookstore.model.Book" >
    <constructor >
      <idArg column="book_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="book_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="book_type" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="book_author" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="book_price" jdbcType="REAL" javaType="java.lang.Float" />
      <arg column="book_press" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="status" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="sales_volume" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="created" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="updated" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs2" type="com.zking.bookstore.model.Book" >
      <id column="book_id" property="bookId" javaType="java.lang.Long" />
      <result column="book_name" property="bookName" javaType="java.lang.String" />
      <result column="book_type" property="bookType" javaType="java.lang.Long" />
      <result column="book_author" property="bookAuthor" javaType="java.lang.String" />
      <result column="book_price" property="bookPrice" javaType="java.lang.Float" />
      <result column="book_press" property="bookPress" javaType="java.lang.String" />
      <result column="status" property="status" javaType="java.lang.Long" />
      <result column="sales_volume" property="salesVolume" javaType="java.lang.Long" />
      <result column="created" property="created" javaType="java.util.Date" />
      <result column="updated" property="updated" javaType="java.util.Date" />
      <result column="book_remark" property="bookRemark" javaType="java.lang.String" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.zking.bookstore.model.Book" >
    <constructor >
      <idArg column="book_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="book_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="book_type" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="book_author" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="book_price" jdbcType="REAL" javaType="java.lang.Float" />
      <arg column="book_press" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="status" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="sales_volume" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="created" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="updated" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="book_remark" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    book_id, book_name, book_type, book_author, book_price, book_press, status, sales_volume, created, 
    updated
  </sql>
  <sql id="Blob_Column_List" >
    book_remark
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_book
    where book_id = #{bookId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_book
    where book_id = #{bookId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.zking.bookstore.model.Book" >
    insert into t_book (book_name, book_type, 
      book_author, book_price, book_press, 
      status, created, 
      book_remark)
    values (#{bookName,jdbcType=VARCHAR}, #{bookType,jdbcType=BIGINT}, 
      #{bookAuthor,jdbcType=VARCHAR}, #{bookPrice,jdbcType=REAL}, #{bookPress,jdbcType=VARCHAR}, 
      1, now(), 
      #{bookRemark,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zking.bookstore.model.Book" >
    insert into t_book
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="bookId != null" >
        book_id,
      </if>
      <if test="bookName != null" >
        book_name,
      </if>
      <if test="bookType != null" >
        book_type,
      </if>
      <if test="bookAuthor != null" >
        book_author,
      </if>
      <if test="bookPrice != null" >
        book_price,
      </if>
      <if test="bookPress != null" >
        book_press,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="salesVolume != null" >
        salesVolume,
      </if>
      <if test="created != null" >
        created,
      </if>
      <if test="updated != null" >
        updated,
      </if>
      <if test="bookRemark != null" >
        book_remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="bookId != null" >
        #{bookId,jdbcType=BIGINT},
      </if>
      <if test="bookName != null" >
        #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="bookType != null" >
        #{bookType,jdbcType=BIGINT},
      </if>
      <if test="bookAuthor != null" >
        #{bookAuthor,jdbcType=VARCHAR},
      </if>
      <if test="bookPrice != null" >
        #{bookPrice,jdbcType=REAL},
      </if>
      <if test="bookPress != null" >
        #{bookPress,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=BIGINT},
      </if>
      <if test="salesVolume != null" >
        #{salesVolume,jdbcType=BIGINT},
      </if>
      <if test="created != null" >
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null" >
        #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="bookRemark != null" >
        #{bookRemark,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zking.bookstore.model.Book" >
    update t_book
    <set >
      <if test="bookName != null" >
        book_name = #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="bookType != null" >
        book_type = #{bookType,jdbcType=BIGINT},
      </if>
      <if test="bookAuthor != null" >
        book_author = #{bookAuthor,jdbcType=VARCHAR},
      </if>
      <if test="bookPrice != null" >
        book_price = #{bookPrice,jdbcType=REAL},
      </if>
      <if test="bookPress != null" >
        book_press = #{bookPress,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=BIGINT},
      </if>
      <if test="salesVolume != null" >
        status = #{salesVolume,jdbcType=BIGINT},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null" >
        updated = #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="bookRemark != null" >
        book_remark = #{bookRemark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where book_id = #{bookId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zking.bookstore.model.Book" >
    update t_book
    set book_name = #{bookName,jdbcType=VARCHAR},
      book_type = #{bookType,jdbcType=BIGINT},
      book_author = #{bookAuthor,jdbcType=VARCHAR},
      book_price = #{bookPrice,jdbcType=REAL},
      book_press = #{bookPress,jdbcType=VARCHAR},
      updated = now(),
      book_remark = #{bookRemark,jdbcType=LONGVARCHAR}
    where book_id = #{bookId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zking.bookstore.model.Book" >
    update t_book
    set book_name = #{bookName,jdbcType=VARCHAR},
      book_type = #{bookType,jdbcType=BIGINT},
      book_author = #{bookAuthor,jdbcType=VARCHAR},
      book_price = #{bookPrice,jdbcType=REAL},
      book_press = #{bookPress,jdbcType=VARCHAR},
      updated = now(),
      book_remark = #{bookRemark,jdbcType=LONGVARCHAR}
    where book_id = #{bookId,jdbcType=BIGINT}
  </update>
</mapper>